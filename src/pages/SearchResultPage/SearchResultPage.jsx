import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import HeaderComponent from '../../components/HeaderComponent/HeaderComponent';
import { 
  Container, 
  Banner, 
  SearchResultsWrapper, 
  FilterSection, 
  SearchResultsContainer, 
  SearchResultsList 
} from './style';
import banner from '../../assets/banner.png';
import start_point from '../../assets/start-point.png';
import end_point from '../../assets/end_point.png';
import BookingForm from '../../components/BookingForm/BookingForm';
import SeatSelectionForm from '../../components/SeatSelectionForm/SeatSelectionForm';
import ScheduleForm from '../../components//ScheduleForm/ScheduleForm';
import PolicyForm from '../../components/PolicyForm/PolicyForm';

const SearchResultsPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [results, setResults] = useState(location.state?.results || []);
  const [selectedRouteId, setSelectedRouteId] = useState(null);
  const [selectedTab, setSelectedTab] = useState("Ch·ªçn gh·∫ø");
  console.log('results',results);

  // M·ªói l·∫ßn location.state thay ƒë·ªïi (nghƒ©a l√† c√≥ t√¨m ki·∫øm m·ªõi), c·∫≠p nh·∫≠t l·∫°i results
  useEffect(() => {
    setResults(location.state?.results || []);
  }, [location.state]);

  const handleSelectRoute = (routeId) => {
    setSelectedRouteId(routeId);
  };
  
  const handleTabClick = (routeId, tab) => {
    setSelectedTab({
      [routeId]: tab, // Ch·ªâ gi·ªØ l·∫°i tab c·ªßa route m·ªõi, x√≥a m·ªçi route c≈©
    });
  };
  
  return (
    <Container>
      <HeaderComponent />

      <Banner>
        <img src={banner} alt="Banner" />
      </Banner>

      <BookingForm />

      <SearchResultsWrapper>
        <FilterSection>
          <h3>B·ªò L·ªåC T√åM KI·∫æM</h3>

          <div className="filter-group">
            <h4>Gi·ªù ƒëi</h4>
            <label><input type="checkbox" /> S√°ng s·ªõm 00:00 - 06:00</label>
            <label><input type="checkbox" /> Bu·ªïi s√°ng 06:00 - 12:00</label>
            <label><input type="checkbox" /> Bu·ªïi chi·ªÅu 12:00 - 18:00</label>
            <label><input type="checkbox" /> Bu·ªïi t·ªëi 18:00 - 24:00</label>
          </div>

          <div className="filter-group">
            <h4>Lo·∫°i xe</h4>
            <button>Gh·∫ø</button>
            <button>Gi∆∞·ªùng</button>
            <button>Limousine</button>
          </div>

          <div className="filter-group">
            <h4>T·∫ßng</h4>
            <button>T·∫ßng tr√™n</button>
            <button>T·∫ßng d∆∞·ªõi</button>
          </div>
        </FilterSection>

        {/* Danh s√°ch k·∫øt qu·∫£ t√¨m ki·∫øm */}
        <SearchResultsContainer>
          {results
            ? (
              results.map((schedule) => (
                <h2>{schedule.route.routeName} ({results?.length || 0})</h2>
              ))
            )
            : <p>H√£y l·ª±a ch·ªçn chuy·∫øn ƒëi</p>
          }
          <SearchResultsList>
            {results && results.length > 0 ? (
              results.map((schedule) => (
                <div 
                  key={schedule.route.id} 
                  className="result-item" 
                  onClick={() => handleSelectRoute(schedule.route.id)}
                  style={{ cursor: "pointer" }}
                >
                  {/* C·ªôt 1: Th·ªùi gian ƒëi & ƒëi·ªÉm ƒëi */}
                  <div className="route-info">
                  <span className="time">
                    {schedule.departureTime
                      ? new Date(schedule.departureTime).toLocaleTimeString("vi-VN", {
                          hour: "2-digit",
                          minute: "2-digit",
                          hour12: false,
                          timeZone: "Asia/Ho_Chi_Minh"
                        })
                      : "16:00"}
                  </span>
                    <span className="location">{schedule.route.startPoint || "B·∫øn Xe Mi·ªÅn T√¢y"}</span>
                  </div>

                  {/* C·ªôt 2: D·∫•u ch·∫•m, ·∫£nh & th·ªùi gian di chuy·ªÉn */}
                  <div className="route-meta">
                    <div className="route-line">
                      <img src={start_point} alt="start" className="icon-start" />
                      <span className="dashed-line"></span>
                      <span className="travel-time">{`${Math.floor(schedule.route.duration / 60)} gi·ªù` || "4 gi·ªù"}</span>
                      <span className="dashed-line"></span>
                      <img src={end_point} alt="end" className="icon-end" />
                    </div>
                  </div>

                  {/* C·ªôt 3: Th·ªùi gian ƒë·∫øn & ƒëi·ªÉm ƒë·∫øn */}
                  <div className="route-info">
                  <span className="time">
                    {schedule.arrivalTime
                      ? new Date(schedule.arrivalTime).toLocaleTimeString("vi-VN", {
                          hour: "2-digit",
                          minute: "2-digit",
                          hour12: false,
                          timeZone: "Asia/Ho_Chi_Minh"
                        })
                      : "16:00"}
                  </span>
                    <span className="location">{schedule.route.endPoint || "B·∫øn Xe Tr√† Vinh"}</span>
                  </div>

                  {/* C·ªôt 4: Lo·∫°i xe & ch·ªó tr·ªëng */}
                  <div className="route-meta">
                    <span className="bus-type">üöç {schedule.bus.busType || "Limousine"}</span>
                    <span className="available-seats" style={{ color: "green" }}>
                      {schedule.route.availableSeats ? `${schedule.route.availableSeats} ch·ªó tr·ªëng` : "11 ch·ªó tr·ªëng"}
                    </span>
                  </div>

                  {/* C·ªôt 5: Gi√° v√© */}
                  <div className="route-price">
                    {schedule.price ? `${schedule.price} ƒë` : "160.000 ƒë"}
                  </div>
                  <hr className="divider" />

                  <div className="options-container">
                    <div className="extra-options">
                      {["Ch·ªçn gh·∫ø", "L·ªãch tr√¨nh", "Ch√≠nh s√°ch"].map((tab) => (
                        <span
                          key={tab}
                          className={`tab ${selectedTab[schedule.id] === tab ? "active" : ""}`}
                          onClick={() => handleTabClick(schedule.id, tab)}
                        >
                          {tab}
                        </span>
                      ))}
                    </div>
                    <button 
                      className="route-btn" 
                      style={{ backgroundColor: selectedRouteId === schedule.route.id ? "#ff5722" : "#ccc", color: "white" }}
                    >
                      Ch·ªçn chuy·∫øn
                    </button>
                  </div>
                  {/* N·ªôi dung hi·ªÉn th·ªã d·ª±a tr√™n tab */}
                  <div className="tab-content active">
                      {selectedTab[schedule.id] === "Ch·ªçn gh·∫ø" && <SeatSelectionForm routeId = {schedule.route.id} routePrice = {schedule.price} />}
                      {selectedTab[schedule.id] === "L·ªãch tr√¨nh" && <ScheduleForm routeId = {schedule.route.id} routePrice = {schedule.price} />}
                      {selectedTab[schedule.id] === "Ch√≠nh s√°ch" && <PolicyForm routeId = {schedule.route.id} routePrice = {schedule.price} />}
                     </div>
                </div>
              ))
            ) : (
              <p>Kh√¥ng c√≥ tuy·∫øn n√†o ph√π h·ª£p.</p>
            )}
          </SearchResultsList>
        </SearchResultsContainer>
      </SearchResultsWrapper>
    </Container>
  );
};

export default SearchResultsPage;

